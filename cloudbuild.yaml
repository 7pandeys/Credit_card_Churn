
steps:
  # Step 1: Scan formatting, linting, and run tests 
  - name: 'python:3.10.13-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source ./run-ci.sh

  # Step 2: Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |   
        # Build image tag based on branch and tag conditions
        # if [[ "$BRANCH_NAME" = "main" ]] && [[ "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        #   _TAG="$TAG_NAME"
        # else
        #   _TAG="$SHORT_SHA"
        # fi
        docker build --network=cloudbuild -t ${_IMAGE_NAME} .
        docker tag $_IMAGE_NAME '${_DOCKER_ARTIFACTORY}${_TAG}'
        docker push '${_DOCKER_ARTIFACTORY}${_TAG}'

#   # Step 3: Deploy Docker image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: ['run', 'deploy', 'vizion', '--image', '${_DOCKER_ARTIFACTORY}${_TAG}', '--region', '$LOCATION', '--platform', 'managed']

  # Step 4: Update Poetry dependencies and publish to custom repository
  - name: 'python:3.10.13-slim'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        pip install poetry
        poetry self update
        poetry self add keyrings.google-artifactregistry-auth
        poetry config repositories.dds-dev '${_PYTHON_ARTIFACTORY}'
        poetry publish --build --repository dds-dev


substitutions:
  _DOCKER: docker
  _PYTHON: python
  _IMAGE_NAME: vizion
  _TAG: tests41 # temporary tag to test the pipeline
  _DOCKER_ARTIFACTORY: '${LOCATION}-${_DOCKER}.pkg.dev/${PROJECT_ID}/${_DOCKER}/${_IMAGE_NAME}:'
  _PYTHON_ARTIFACTORY: 'https://${LOCATION}-${_PYTHON}.pkg.dev/${PROJECT_ID}/${_PYTHON}/'


options:
  substitutionOption: 'ALLOW_LOOSE'
  dynamicSubstitutions: true
  logging: CLOUD_LOGGING_ONLY 
